╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║                         The nᵗʰ Programming Language                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

                            Copyright © Daniel Smith                            

 ┌────────────────────────────────────────────────────────────────────────────┐
 │                                 Preamble                                   │
 ├────────────────────────────────────────────────────────────────────────────┘
 │
 ├ 1 This document forms a comprehensive specification of the properties of
 │   the programming language, nᵗʰ.
 │
 ├ 2 The purpose of this document is to encourage the portability of nᵗʰ 
 │   programs across a variety of computing systems and implementations.
 │
 │┌──────────────────────────────────────────────────────────────────────────┐
 ├│                                 License                                  │
 │├──────────────────────────────────────────────────────────────────────────┘
 ││
 │├ 1 The author(s) grants the holder of this work full right of access, 
 ││   without limitation, irrevocably, in perpetuity, for any purpose,
 ││   by any means.
 ││
 │├ 2 Authorship of this work is reserved only for contributions to this
 ││   work which are made under the terms given in this license.
 ││
 │├ 3 Contribution to this work under terms other than those given in this
 ││   section constitutes authorship of a distinct and separate work, for
 ││   which the status of authorship of this particular work is not granted.
 ││
 │├ 4 In plain terms, if you, the holder of this work, create any 
 ││   derivation, modification, or copy of this work, in whole or in part,
 ││   you cannot claim that it is a form of, version of, variation of, 
 ││   or in any way associated with the work titled 
 ││   "The nᵗʰ Programming Language" without first providing it under the 
 ││   terms set out in this license.
 ││
 │└ 5 The purpose of these terms is to provide you, the licensee, the most 
 │    permissive rights and allowances, while preventing any individual or
 │    entity from claiming authorship with less permissive rights and thus
 │    reducing the availability of this work.
 │
 │┌──────────────────────────────────────────────────────────────────────────┐
 ├│                               Conformance                                │
 │├──────────────────────────────────────────────────────────────────────────┘
 ││
 │├ 1 This document represents a standard of conformance. As such, the 
 ││   descriptions therein represent requirements for an implementation.
 ││
 │├ 2 An implementation of nᵗʰ is said to conform to this standard if it 
 ││   comprehensively demonstrates all the properties described in this 
 ││   document.
 ││
 │├ 3 In cases where the practical limitations of an otherwise conforming
 ││   implementation prevent full conformance, the implementation must 
 ││   provide documentation about which clauses or sections it does not 
 ││   conform to
 ││
 │└ 4 Some clauses may be "implementation dependent" or
 │    "implementation defined" where the manner in which an implementation
 │    meets a requirement is outside the scope of conformance.
 │
 │┌──────────────────────────────────────────────────────────────────────────┐
 ├│                                  Scope                                   │
 │├──────────────────────────────────────────────────────────────────────────┘
 ││
 │├ 1 This document specifies...
 │                                     ∙ The form of an nᵗʰ program.
 │                                     ∙ The stored format of an nᵗʰ program.
 │                                     ∙ The effects of interpreting an nᵗʰ
 │                                       program.
 │                                     ∙ The process by which an nᵗʰ program is
 │                                       judged to be correct.
 │                                     ∙ The requirements of a conforming 
 │                                       implementation.
 │
 │
 │
 │
 │
 └

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │2    │                                                            Rationale │
 ├─────┴──────────────────────────────────────────────────────────────────────┘
 └ There's many tools that are used to iteratively construct an artifact over
   time. Sculpting and woodworking tools are one such example. Another is 
   computer design software such as CAD, 3D design, or video editing. In all 
   such cases, the tool and the artifact start out closely intertwined, but the
   completed artifact will always stand alone in the end. The tools only ever 
   reach as far as scaffolding is required to prop up an incomplete artifact.

   In the world of software design, this principal of scaffolding is entirely 
   lost. There are two choices: batch or dynamic. The batch method replaces any
   notion of iteration with brute-force productivity. Any change to the artifact
   requires the entire artifact to be re-built from scratch. The dynamic method
   replaces any notion of an artifact with the idea that the tool is the 
   artifact. Imagine a painter using the batch method. Each brush stroke would 
   require the painter to repeat all the previous strokes on a new canvas. 
   Imagine a vehicle manufacturer using the dynamic method. The tools from each
   assembly stage would have to be included as part of the vehicle. The result 
   would be an inoperable pile of scrap. If these approaches seem absurd, it is
   because they are genuinely, completely absurd. No designer would ever attempt
   to function this way. The entire process of design would be infeasibly slow
   and wasteful; precisely just as the process currently exists in the world of
   software design.

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │3    │                                                                Terms │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │4    │                                                             Overview │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 nᵗʰ is a programming language. you use it to write programs

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │5    │                                                               Syntax │
 └─────┴──────────────────────────────────────────────────────────────────────┘
 see figure 1.
 the characters sequences from begin may be used interchangeably.
 the cannonical form of a source text is one which only uses () to delimit 
 expressions


 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │6    │                                                           Evaluation │
 └─────┴──────────────────────────────────────────────────────────────────────┘

  evaluation is function application with binding resolution.
  Before evaluation macros must be computed.

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │7    │                                                                 Data │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 algebraic data types.
 arrays.
 items.
 lists.
 segments and views
 bits
 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │8    │                                                             Numerics │
 └─────┴──────────────────────────────────────────────────────────────────────┘
 
 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │9    │                                                            Functions │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │10   │                                                                Types │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │11   │                                                              Modules │
 └─────┴──────────────────────────────────────────────────────────────────────┘

 ┌─────┬──────────────────────────────────────────────────────────────────────┐
 │12   │                                                               Images │
 └─────┴──────────────────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                   Figures                                    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ 1. nᵗʰ Grammar │                                                             ┃
┠────────────────┘                                                             ┃
┃                                                                              ┃
┃              Program    → Blank | Symbol | String | Expression               ┃
┃              Blank      →  ̲ ⃗ | ^̲J̲  ̲ ⃗ | ^̲I̲ ^̲J̲                                 ┃
┃              Symbol     → □ ⃗                                                 ┃
┃              String     → "̲ Character "̲                                      ┃
┃              Character  → □ ⃗ | \̲ \̲ | \̲ "̲ | \̲ Expression                      ┃
┃              Expression → Begin List ⃗ End | Begin Blank End | Begin End      ┃
┃                           | Indent List ⃗ Dedent                              ┃
┃              Begin      → (̲                                                  ┃
┃              End        → )̲                                                  ┃
┃              Indent     → ^̲J̲ ^̲I̲ [^̲I̲ ⃗]                                        ┃
┃              Dedent     → ^̲J̲ [^̲I̲ ⃗]                                           ┃
┃              List       → Item | Item Delimiter List                         ┃
┃              Item       → Symbol | Expression | Symbol Delimiter Item        ┃
┃              Delimiter  → Blank | Expression                                 ┃
┃                                                                              ┃
┠──────────────────────────────────────────────────────────────────────────────┨
┃                                                                              ┃
┃ This grammar denotes how a sequence of characters representing an nᵗʰ        ┃
┃ program may be validated. The grammar is comprised of named rules which      ┃
┃ dictate the order in which characters must appear in order to form a         ┃
┃ valid program.                                                               ┃
┃                                                                              ┃
┃ Each rule is formed by a name, followed by an arrow, followed by a list of   ┃
┃ character sequences separated by pipes (|).                                  ┃
┃                                                                              ┃
┃ A character sequence represents a permitted ordering of individual           ┃
┃ characters and other sequences. It is denoted by listing names of other      ┃
┃ rules, and single characters in the order in which they should appear,       ┃
┃ from left to right.                                                          ┃
┃                                                                              ┃
┃ Character values are denoted by any character with an underline. Character   ┃
┃ values which are not printable (control characters) are represented using    ┃
┃ their corresponding Caret Notations.                                         ┃
┃                                                                              ┃
┃ Some items in a character sequence may repeat once or more. This is denoted  ┃
┃ by a character value or rule being postfixed with an arrow ( ⃗).              ┃
┃                                                                              ┃
┃ Items which are surrounded by square braces ([ ]) may appear optionally.     ┃
┃                                                                              ┃
┃ A symbol can be comprised of any Unicode character which is not listed in a  ┃
┃ sequence rule, and which is not a control character. For this reason, the    ┃
┃ rule for "Symbol" uses a box as a wildcard corresponding to any valid        ┃
┃ Unicode character.                                                           ┃
┃                                                                              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 
 DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT DRAFT  
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

What macros do I have?

define
let
?
reduce
with 
compute 
from
numerical comparison
entity comparison
function

What functions do I have?

bounds
symbol
#
##
parameters
result

what abstractions do I have?
system abstractions are formatted buffers.
You have a local region controlled by the runtime. 
It′s tied to an external resource.
There′s an API to digest the buffer′s data.
There′s another API to synchronize the buffer with the resource.

anything that runs of the system API.

System Description
- Processor Register Files
  ISA Listing
  Peripherals
  Ports

defining requires a non-empty string after the initial name.

what is an image?
an image stores the names of things.
what about polymorphism?
Those desugar to varargs rather than monomorphization.
actually it′s fine to define a function as multiple functions and type hints will skip the initial case matching.

are formatting characters allowed in strings? like if I wanted to have a line
break, just do 
"Hello,
world" ?
yes.

strings are utf-8 encoded.
it′s literally just the bytes of input.
Constructing a string can evaluate things.

what do I actually need to be compatible with a host system?
The ability to import libraries as modules.
What can I safely assume about a system?

- It has a single thread.
- It has a (flat) filesystem.
- It has RAM.

Do I really need both a type system and macros?
Type are just macros.
ADT′s are already just a macro.
No, a type system to check that your program is actually working is good.
Static verification helps with large projects.


What does nth have?

Types:
You can look at a form and decide what type you will get from evaluating it.
You can constrain variables and places in execution.

Circularity:
You can capture a part of a program as a single object and then execute it.

Math:
You have integer ranges, saturating and modular. 
You have arbitrary precision algebraic numbers.

Control Flow:
You have pattern/case matching, conditional execution, and effects.

Predictable Runtime:
There′s no heap, everything is on the stack.
Functions own anything that′s been allocated while the function is active.
When the function returns, those things are reclaimed.
Indirection is also traced for things which have to escape the function scope.

Modules:
You can declare namespaces for things.
Parts of your program are encapsulated from other parts.
Modules form a build system where you can use external files.

Composite Data:
Algebraic Data Types, but guaranteed to occupy a contiguous region of memory.

Images:
Basically the "project file" but all code is cached in the binary file.

System stuff:
You can emit assembly and import binary objects as images.
You can also export parts of your image as libraries or executables.

Indirection:
Lists are just arrays of pointers to things.
Lists allow checked indirection.
You can use a list to refer to things on the stack.

how to make numbers be constant space?
Arbitrary precision numbers cannot be constant space.
That might be fine though.
Anything that′s an items type can be destructured using comprehension syntax.


javascript array buffers and data views are an interesting system to adopt.
they pretty much solve the entire purpose of having C around.
Plus you can statically type stuff you get out of the array.
For an implementation, there′s a machine type which corresponds to storage.
What are my methods for storage arrays and viewtypes though?
"Storage" or "Memory"


how do I use types?
mainly for monomorphization. I want to specialize code to elide type checks.
Secondly, I want to remove all type errors. You have to provide some form of 
static artifact that shows the compiler that you can satisfy the constraints.

quantification using let:
if I write something like 
(let x : T in P x)
that′s the same as ∀x∈T,P(x)
if I write 
(let x : T in (P x) = t)
that′s the same as ∃x∈T, P(x) = t

the editor uses alt codes for symbol palettes.

what are my functions?

+             addition
−             subtraction 
×             multiplication
÷             division 
↑             exponentiation
↓             logarithm
simplify      symbolically convert an algebraic expression to a simplified form
⌈             ceiling
⌊             floor
≤             less or equal
≥             greater or equal
<             less
>             greater

=             equality comparison
≠             inequality comparison

¬             negation 
∧             conjunction
∨             disjunction

apply         function application
∙             function compose
?             function signature

∆             concatenate items
∇             slice items

′             quote
″             unquote
‴             requote

#             cardinality


special forms:

top type
  ′∗
bottom type
  ′_
definition
  (′define ″Symbol ″String ‴Program)
  (′define (‴Symbol) ″String ‴(‴Symbol))
function constructor
  (function (‴Symbol) ‴Program)
Array constructor
  (array ″Type ″Natural)
Tuple constructor
  (′values ‴*)
Tagged Tuple constructor
  (″Symbol ‴*)
List constructor
  (′list ‴*)
Conditional evaluation
  (′? ″* ‴(″* ‴Program))
Lexical binding
  (′let ‴(type ′(* ′: *) ′(* = *) ′(‴Program = *)) ′in ‴Program)
Type constructor
  (′type ‴*)
Module definition
  (′module ‴Program)
Module exports
  (′export ‴Symbol)
Versioning
  (′version ″Number ‴Program)
description
  (′describe ″symbol)


let           lexical binding
do            sequencing
the           type assertion
[function] ... function application
[symbol] ...   tagged tuple
segment       segment constructor
size          segment width

macros:

list constructor
  (′[ ‴* ′])
type constructor
  (‴(‴* ′|))
array constructor
  (′⟨ ″Type ′⟩)
  (′⟨ ″Type ″Natural ′⟩)
function constructor
  (‴Symbol → ‴Program)
  (‴ (″*) → ‴Program)
tuple constructor
  (′{ ‴* ′})



memory model:
Fixed size things can be mutated in-place.
Arbitrary sized things are mutated using indirection.
Look at this program for example.


define give-me-string 
       _ → String
       _ → 
           let 
            start = "Hello"
            rest = ", World!"
           in
            (map rest c → start + (string c)),
            start
In this example, I loop over the 'rest string and append each character to the 
start string. I perform an append which clobbers the array. If I wanted a more 
efficient program, I would write the following code.

define give-me-string _ →
 let 
     start = "Hello"
     rest = ", World!"
     new = (array Byte ((# start) + (# rest)))
     partition = (# start)
 in
     (map start 
      c i → new i c),
     (map rest 
      c i → new (i + partition) c),
     (string new)

This example pre-allocates a Byte array to store the combined string inside.
It then iterates through each string and clobbers the array.
This is faster than the first one because the first one requires that you 
re-allocate on each call to append. Honestly there should just be a concatenate.


In my stack-based memory model, I can allocate quickly by bumping. However the 
trade off is that I have to perform a lot of copying.
So I'll take a page from functional languages that have a lot of copying and 
arbitrarily-sized data structures and use indirection.
Anything that might change size requires a pointer.
Things like Natural/Integer/Rational or lists can all change sizes and will 
change sizes often in the real world. Therefore, they're all indirect.
If I want to perform addition with two very large numbers, just bump and copy.
If I want to increment a register by 1, then I overwrite it. 
Only fixed size things can be overwritten. 
THIS INCLUDES LIST SLOTS WHICH CAN ALSO BE OVERWRITTEN.
But with this model, my runtime can use a single linear stack for most things, 
and indirection is automatically traced when a piece of data that uses 
indirection escapes the scope.
Should I allow the programmer to reason about the size of things?
Yes. You might want to put some data somewhere

how do I perform quantification? 
I would use let binding and introduce a typed variable with no actual value.

How do I implement versioning in my language?
Per image.
Every time you re-define something, it's incremented as a version.
Is this the way I want to do that though? 
How do I change something without polluting the image with needless changes?
Imagine an image that grows with previous versions of everything you've ever
edited.

You can embed the compiler and any other kinds of dynamic routines into an app,
but the purpose of nth is to be able to extract a completed, stand-alone, 
static binary.
If you want to use nth as a kind of "OS within an OS", you can do that by just 
not extracting a function and instead export a module.

Arbitrary precision numbers are fine. 
Embedding them inside an ADT should also be fine. 
There should be a way to "grow" the ADT in a contiguous region by shuffling 
the order of the fields.
Or, the only indirection is recursion. If I write something like
(define (foo x y z))
then I can do something like 
(foo 1/38292 -382984/239847293847 3829843)
and that will be inside constant space.
So ADT instances should be fine.
But what about something like this?

(define (foo x) 
 instance x -> foo x
 inst (instance x) y -> instance y)

and then doing something like 
(let i = (instance 1)
 in (inst i 2))
