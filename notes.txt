You should only ever be five lines away from networks, peripherals, and concurrency.

In Haskell...
  class TypeOf a where
    typeOf :: a -> String
  instance TypeOf Bool where
    typeOf _ = "Bool"
  instance TypeOf Char where
    typeOf _ = "Char"
  instance (TypeOf a, TypeOf b) => TypeOf (a, b) where
    typeOf(a, b) = "(" ++ typeOf a ++ "' " ++ typeOf b ++ ")"
|> typeOf (True, 'a')
   "(Bool, Char)"

In nth...
  (define TypeOf (-> String))
  (define (typeOf : TypeOf) 
    (type
      ((Boolean) -> "Boolean")
      ((Character) -> "Character")
      (a b -> "\(typeOf a), \(typeOf b)")))
|> (typeOf True "a")
   "(Boolean, Character)"

I only support Integers.
Integers are shared by everything.
You can accomplish most stuff with just integers.
If you want more, just add additional stuff on top of integers.
Plus I have ranges which are static sized integers.

"This is the first line.
This is the second line"

"This is the first line.\(Newline)
This is the second line."

"This is the first line." + Newline +
"This is the second line."


When I want to include code from a separate module, there's three ways.

Compile the code as part of the artiface.
Allow the code to be linked by the system linker.
Link to the code during runtime.

"Static",
(define ABC (! 'libABC)),
(define foo (ABC . foo)),
(foo "data")

"Linking",
(define ABC (! 'libABC)),
((ABC . foo) "data")

"Load Time",
(let ABC = (! 'libABC)
 in  (ABC . foo) "data")


is (array Symbol 100)
a supertype of
(collection 'Symbol)?

can inversion be a macro?
maybe?
if it's static it can.

({ a b c d })
( a ; b ; c ; d ; e)
(collection a b c d e)
(# a b c d e)


big big big question
--------------------------------------------------------------------------------
how does the compiler enforce this type?
(define evens (Number | (n -> (n mod 2) = 0)))
Can it even verify this?
Say I have (x : evens)
If I do (x = (5 * 324 + 7)), how does the compiler verify that this expression 
conforms to the type?
I can't enforce it.

The point of having types like this was to be able to talk about what a
program does. This doesn't do it.

All I really need is an assertion macro. This doesn't appropriately constrain
the language in any useful way. It would be much better to use 
inversion consumers and producers. Inversion is not just control flow, but 
also a way to guarantee behavior.

So what if I want to write an expression which matches >>
('('''(type Symbol Collection) >> ''Program) -> *)

do I want to use collection notation?
instead of (collection x = 1, y = 2, z = 3) I can use {x = 1, y = 2, z = 3}
and instead of (type a b c) I can use [a b c] 
This is the most convenient form.


how do I use character macros?
I provide the compiler with a function to dispatch on a character, just like CL
How would it look?
Here's the character macro for types.
()

FOR THE LAST TIME, I DO NOT NEED ADT'S.

I HAVE DEPENDENT TYPING VIA SYMBOLIC EVALUATION AT THE TYPE LEVEL.
If I have an arbitrary predicate, P, then (x -> P x) is evidence of the
predicate, and if (P' = (x -> P x)), then (P' *) quantifies the members which 
satisfy the predicate.


What's my maxwell's equations?

(define compute ((p : Program) -> ? p
'(define ''Symbol ''Function) 
(let (_ i v) = P
 in  this . i = (compute v))

'(''Function '''Program)
(let (fun args *) = p
     params = (parameters fun)
     eval-arg = (plist -> let (first rest *) = plist
                          in ? rest
                               (collection (compute first) (k rest)))
 in
     )

))



Do I need types when I don't have types?
I need nominal types.
I also need type constructors for enumerating things.
Creating enumeration types allows you to express things naturally.

If I have (define addition-A (x y -> ...))
and (define addition-B (x y -> ...))
then I can say that (define addition (type addition-A addition-B))
because in all cases, I'm performing addition on one of two cases, distinct 
only by type.
I can say this more tersely by writing
(define addition [((x : A) (y : A) -> ...) ((x : B) (y : B) -> ...)])


I want punctuation which is in pairs.
I want symbol recognition.
I want expression recognition.


(define "begin" T "end" (-> ...))
(define ((Symbol -> ...)))
(define ((Expression) -> ...))

I can write a data type using types

{A} + T + {B}
is any collection which begins with A and ends with B
how complex can I get with this?
Can I do non-primitive operations?
What about (define foo ((A : Collection) (B : Collection) -> A + x + B))

{A} + T + {B}
is equivalent to the two constraints
result = (concatenate {A} T) 
...
(concatenat result {B})

and 
result = (concatenat T {B})
...
(concatenate {A} result)


My dependent types are very specific. 
I do not refine anything.
It's only about functions.

What can I steal from APL and Shen Lisp.
I want destructuring and iteration for collections.
Since they're relatively small, dense arrays, you can do useful things
with them.

how to overwrite a thing from let with destructuring binding?
if I have 
(define M {1 2 3})
and I have 
(let (x y z) = M 
 in ...)
how would I destructively update M in the let binding?

should I have macro characters at all?
maybe not.
