how to define polymorphic functions.
also how to define ad-hoc functions?

(define foo (
    (a) | 
    (b) |
    (c)  ))

how do I specify syntax?
How does the (syntax ...) declaration work?

I need to specify structure and keywords.
So what do I match on?
A pattern can specify that an item is 
* a keyword                             'symbol
* any single item                       x
* a symbol                              ''x
* an expression                         '''x
* repeating                             _ ...


('syntax name (expression ...) (body ...))
('define name (expression ...))
('data (name ...) constructors ...)
('use imports ...)
('in module)
('leave)
('export module options ...)

What's the difference between ((foo ...) ...)
and (foo (...) ...) ?
          ^ this just folds into the last ...
((x ...) ...)
this is a repeating expression



What does nth have?
Modules,
Macros,
Functions,
GADTs,
Tuples,
Lists,
Sums,
Arbitrary Precision Integers,
Binary Types,
Inversion
Pattern Matching via structural subtyping
Reflection




Modules:
Modules are key-value stores. The correspond directly to binary objects.
Module functions are Load, Use, In, Export, and Module.
Load will load a module from a file specified by a pathname or a symbol implying automatic lookup.
Use will import names from a module into the top level.
In will set a module as the new top level.
Export will safe a module or function as a file.
Module will declare a new module.

Modules are declared in a single expression using nested defines, syntaxes, and data.


(define (' foo ('' a) (''' b) c))


(define (' use (''' (type Symbol (' a b) (' (''' a) b)))))