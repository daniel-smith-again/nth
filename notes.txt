Here's the issue. 
I want to link to a module while I'm making a program and use its components 
as if they were defined by mine own hand in the image.

> (in 'foo)
> (use (my-mod a b c))
> (define (f : a) (function m n (...)))
               ^--- I want this. 
               I want to take an entity from a library and use it as if it were 
               native in my language.

I can record the intensional supertype of a function body to use when comparing
functions.


how to define polymorphic functions.
also how to define ad-hoc functions?

(define foo (
    (a) | 
    (b) |
    (c)  ))

how do I specify syntax?
How does the (syntax ...) declaration work?

I need to specify structure and keywords.
So what do I match on?
A pattern can specify that an item is 
* a keyword                             'symbol
* any single item                       x
* a symbol                              ''x
* an expression                         '''x
* repeating                             _ ...

(syntax foo (a b c) 
 )


('syntax name (expression ...) (body ...))
('define name (expression ...))
('data (name ...) constructors ...)
('use imports ...)
('in module)
('leave)
('export module options ...)

how do I make the distinction between a syntax template and a syntax macro function?

(syntax Foo "foo" (foo) (foo xs ...) [template/function])
(syntax Foo "foo" (foo) (foo xs ...) (foo-func xs))
(syntax Foo "foo" (foo bar baz)
 (foo xs ...) (foo-func xs)
 (bar xs ...) -> (let (a b c) xs (' foo ('' a) ('' b) (''' c))))

arrow symbol marks lambda

too many arrows or just enough?
Just enough. I'm actually denoting a function here.

What's the difference between ((foo ...) ...)
and (foo (...) ...) ?
          ^ this just folds into the last ...
((x ...) ...)
this is a repeating expression

primitive declarations (module components) :
 define
 syntax 
 data
 use

(module libfoo "foo library" 
 (foo (function x (x + x))))
this is convenient until you try to wrap the binding in a closure, then it's 
unclear what's being bound and what's syntax for other stuff.

vs.

(module libfoo "foo library"
 (define foo (function x (x + x))))
this works better because other code might surround the definition, so 
explicitly marking where the definition happens is useful.

(module a 
 (let x y 
  (define foo (x + y))))

vs. 

(module a 
 foo (let x y (x + y)))


(module (use ...))
direct module constructions are useful because they're easy to emit and read.
keyword module component declarations are useful for the session though.

Can a function change modules?

(define foo ((m T) (n P) -> 
 (do 
  (in mymodule)
  (foobar x y))))
Nope. This shouldn't work.
Although it should....


functions :
 enter 
 exit 
 expand 



function list
module 
use
define 
syntax 
data
enter 
exit 
expand




What does nth have?
Modules,
Macros,
Functions,
GADTs,
Tuples,
Lists,
Sums,
Arbitrary Precision Integers,
Binary Types,
Inversion
Pattern Matching via structural subtyping
Reflection




Modules:
Modules are key-value stores. The correspond directly to binary objects.
Module functions are Load, Use, In, Export, and Module.
Load will load a module from a file specified by a pathname or a symbol implying automatic lookup.
Use will import names from a module into the top level.
In will set a module as the new top level.
Export will safe a module or function as a file.
Module will declare a new module.

Modules are declared in a single expression using nested defines, syntaxes, and data.


(define (' foo ('' a) (''' b) c))


(define (' use (''' (type Symbol (' a b) (' (''' a) b)))))

you can create a "headless" or embedded module for a limited environment by simply defining a module that doesn't include default, or only includes certain things from default.

for instance,

(define m (module 
 ((Functions Bits Arrays Types Default)
  (Kernel-Data-Structures System-Log OS-Kernel-Mod))
 USB-detect (function (x (Kernel-Data-Structures)))))


 What happens when modules aren't erased?
 They become objects.
 Not quite, they still become modules.
Namespace is still a namespace at runtime.


typeclasses vs. modules vs. GADTs

(data (Eq a)
 (eq (p : a) (q : a) -> Bool)
 (neq (p : a) (q : a) -> Bool))

how is this a typeclass?
because I can do 
(define (Eq foo))

What's the difference with 

class Eq a where
 (==) :: a -> a -> Bool
 (/=) :: a -> a -> Bool

(data (Eq a)
 (== (x : a) (y : a) -> Bool)
 (/= (x : a) (y : a) -> Bool))


(define Eq (a -> (module )))

Modules are for routines.
They aren't composeable like classes are.

Types are also polymorphic constructors that accept certain other types and will 
perform a conversion.
This is how data is copied in nth.


Types :
 Judgement
    Yes or No
 Yes
    Truthy value. Generally anything that's total and non-null
 No
    Falsy value. Null and Boolean false. Anything that's non-total or null.
 Boolean
    True or False
 Bits 
  Flat contiguous segment of boolean bits.
  Can be constructed in segments
 Character
  A number representing a Unicode character.
 Function
  A function that can be applied, possibly with parameters
 Tuple 
  Composite packed type
 List 
  homogeneous indirect type. a tuple of pointers
 Array 
  heterogeneous packed type
 Module 
  key-value store of code
 Number
  Arbitrary width whole integer

in addition, new data types can be created using tagged tuples.

macros :
 (module ...)               module constructor
 (use ...)                  module import declaration
 (define ...)               module export
 (syntax ...)               module syntax
 (data ...)                 module type definition
 (function ...)             function constructor
 (... -> ...)               function constructor
 (reduce ...)               evaluate math as combined PEMDAS expression
 (with ...)                 inversion (delimited continuation) control expression
 (_ ? _ _ ...)              pattern matching
 (_ ? _ _)                  conditional evaluation
 (_ ...)                    function application
 (apply ...)                function composition
 (_ : _)                    type assertion
 ( _ | ...)                 type sum
 (type ...)                 type sum
 


Functions :
 (add : ((a Number) (b : Number) -> Number))
 (subtract : ((a : Number) (b : Number) -> Number))
 (multiply : ((a : Number) (b : Number) -> Number))
 (divide : ((a : Number) (b : Number) -> Number))
 (remainder : ((a : Number) (b : Number) -> Number))
 (modulus : ((a : Number) (b : Number) -> Number))
 (power : ((a : Number) (b : Number) -> Number))
 (root : ((a : Number) (b : Number) -> Number))
 (logarithm : ((a : Number) (b : Number) -> Number))
 (and : (let (t (type Judgement Boolean Bits))
         ((a : t) (b : t) -> t)))
 (or : (let (t (type Judgement Boolean Bits))
        ((a : t) (b : t) -> t)))
 (not : (let (t (type Judgement Boolean Bits))
         ((a : t) -> t)))
 (shiftup : ((a : Bits) (b : Number) -> Bits))
 (shiftdown : ((a : Bits) (b : Number) -> Bits))
 (# : ((a : *) -> Number))



VERY IMPORTANT
You can target constrained environments by including only portions of the default module.
For instance,
(define foo (module (use (Functions Numbers Booleans Default))))


nth is a Lisp language, however it differs drastically at a philosophical level.
For example, it is statically typed.
Latent typing is eschewed in favor of inferred types and static verification.
Prefix notation is relegated to function application and macros are applied via syntax patterns.
It also trades pairs for n-tuples. 
The traditional cons pair may be extended arbitrarily. 
Compare (a . b) to (a, b, c, d, e, ...)



nth is a new lisp.
It's fundamentally different from what one would normally consider a lisp.
For example, it's statically typed.
Rather than the usual Read-Eval-Print cycle, there is instead Read-Verify-Eval-Print.
Another difference is that there is no concept of pairs. 
Normal lisps support the notion of a "cons pair" which all other data structures are formed.
In nth, there are n-tuples. 
They introduce indirection in the same manner as a lisp pair, however pairs are replaced with n-elements.
Thus the normal cons pair (a . b) may be extended arbitrarily, (a . b . c . d ...).


What's the difference between a mutable ADT and a new ADT?
Transforms are ALWAYS in-place.

(define (mut t)
        (box t)
        (set (box x) y -> (box y))
        (get (box x) -> x))

If I do something like 

(let (x (array (5000 (box i32))))
     (set (x _ 1500) (i32 5)))