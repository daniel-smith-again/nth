There is no quantification through types since types are infinite.
Instead you have refinements via 
(T | (x -> f x))
The bar is a higher order function that constructs a type as a relation between an existing type and a predicate as a function.



I do not have coroutines or anything like that. 
I have CPS and macros that perform CPS transforms.
If you want actual parallelism, you need to communicate with the operating system.


Pointers are done with only one operator.
{'@ Any} results in a reference
{'@ Reference} results in a datum
{'@ Reference} : Reference) results in a reference

Top type is "Any".
Bottom type is "None".


What are my basic types?
- Number
  - Integer
  - Natural
  - Floating (for decimal)
- Function
- Collection
  - Type
  - Expression
  - String
- Program
  - Expression
  - Symbol
- Character
- Data
  - Value
  - Reference
  - Byte


There's two kinds of types, discrete and continuous.
A discrete type is anything that has a countable number of inhabitants.
(discrete = [a b c])
A continuous type may have any number of inhabitants.
(continuous = (* | (x -> x)))

typeclass is talking about what stuff can be applied.
so if a slut is fuckable, then 
(slut = (* | (s -> (fuckable s) : *))
that's how you do a typeclass.



btw the bar represents a refinement.
(* | (x -> x))


do I handle recursive bindings?
Yes because even with recursive bindings, there's still a finite amount of constructors.
for example (a = {b}, b = {a}) where a and b are resolved before their definitions are resolved.
There's some kind of typing algorithm there.



Rule 1: New objects can only be added to the active function.
Rule 2: Objects cannot change size.
Rule 3: Objects are not discarded until their function scope exits.



I can also import the M-Notation image and the N-Impl image and they combine to form macros with M-style syntax and N-style rewrites.
How does that even work though? 
It doesn't. 
I'm expressing something else.



The "unit" is an image. It has a uniform interface whether it's compiled or not.
You combine images and use them using linker commands.
You can get symbols, import objects, and other stuff.




What are my typing rules for a Collection?
Constructor...			{ ... }
	A collection has a zero or more elements.
	A collection with zero elements has a cardinality of zero.
	All collections with cardinalities of zero are equal.
	Each element has an index corresponding to the cardinality of the collection without the element plus one.
	The cardinality of a collection is equal to the index of the last element.
	The type of a collection is equal to the collection of types such that the element at the same index is a member of that type.

Union...			{} + {}
	Union constructs a new collection by adding the elements of the right to the left.
	The indicies of the elements being added must be at least one greater than the cardinality of the left Collection.
	The cardinality of the resulting collection is equivalent to the sum of the cardinalities of the left and right collections.
	The resulting collection must exhibit all the properties of a collection having resulted from a collection constructor.

Difference...			{} - {}
	Difference constructs a collection by removing elements from the left collection which are also elements of the right collection.
	The indicies of elements in the resulting collection must be sequential by one, and no greater than the cardinality.
	Given any pair of elements in the left collection, if both elements are in the resulting collection, the element with the greater index in the left collection must have a greater index in the resulting collection.
	The cardinality of the resulting collection must be equivalent to the cardinality of the right collection subtracted from the left.

Membership...			{} / Any
	Membership will yield an element of the left collection which is equivalent to the value on the right.
	If the value on the right is a type, then Membership will yield a collection of all elements which are also elements of that type.
	If the collection on the left has no elements which are equal or members of the value on the right, then Nil is returned.

Subscript...			{} _ Natural
	Subscript will yield an element with an index equivalent to the natural number given on the right.
	If the number given on the right is greater than the cardinality of the collection, Nil is returned.
	If the number given on the right is zero, the outer collection is given, or else the left collection is given.

Product...			{} * [Natural Collection]
	Product will yield a collection with the elements of the collection on the left repeating as many times as the value on the right.
	The number of repetitions is taken either as the natural number or the cardinality of the collection on the right.
	The resulting collection must exhibit all properties of a collection resulting from a constructor.



How do I do quotes?
Single apostrophe is quote which treats an expression as data.
It's also the expression constructor.
Within a single apostrophe, if a double apostrophe occurs (''), that means to evaluate the sub-form and insert the result.
Within a single apostrophy, if a triple apostrophe occurs ('''), that means to evaluate the sub-form and expand the result so each atom appears in sequence in the quoted form.
'(1 2 3) == {1 2 3}
(let (x 1) in '(''x 2 3)) == {1 2 3}
(let (x {2 3}) in '(1 '''x)) == {1 2 3}
Stacking quotations still works, just separate them with whitespace.



What is the special binding '&?
It is a virtual structure which refers to the active function and its context.
It is a collection which represents all data in a function.
It contains a circular reference to the function, so you can call it with fresh parameters.
Recursion is then (x -> (& x))
What index is the function?
The first or the last?
The last.
The first index is the first parameter, so you can do
(x -> (& _ 1)) which is equivalent to (x -> x)


What are bindings?
They're functions of (Symbol -> *)
Bindings are resolved during application.
Application will either thunk expression parameters or lookup symbol parameters.


What can I expression from independent constraint variables?
I can say that a function must yeild the same object.

(n : T, f : ((n) -> n))
What else can it do?
it can yield a type as in, (n : T, (g n)) where the type of the result of (g n) 
is yielded.



native support for computed goto?

(do (switch :: {(_ -> 'a) (_ -> 'b) (_ -> 'c)})
(switch (f x))


finally figured out macros.
You bind a macro to a symbol.
(m :: ((Expression) -> *))
Then you can put the symbol anywhere in a form.
(1 + m - 3)
When it appears in a form, the macro definition is applied to the form.
Multiple macros can be used in a single form.
They're dispatched in order of occurrence.
What about arbitrary overloading?
That works the same way as normal binding.
You can overload any binding by constraining an orthogonal type.
('+ : ('(A + B) -> (& _ 1)))

if I have a constraint, (x : T), I can refine the constraint (x : (t : T)), 
or I can add an orthogonal constraint, (x : K), which is the same as,
(x : [T K]).



What is the name for the function that constructs a collection?
Construct
What is the name for the function that constructs a type?
Take
What is the name for the function that constructs a function?
Abstract
What is the name for the function that constructs a binding?
Let

verbs as in "Construct a Collection", "Take a Type", "Abstract a Function", and "Let a Binding".

(Let x (Elements A B (Members T t)))

Can you actually do variadic functions during runtime?
No, use a collection instead.
The reason the primitives work is because they're primitives with special behavior.



prove leftpad...
leftpad is a function that takes a character, a number, and a string, and 
prepends the character, as many times as the number, to the beginning of the string.

(leftpad = ((c : Character) (n : Natural) (s : String) -> 
           ((({c} * n) + s) : (String | (k -> ((# k) = ((# s) + n)))))
Or prove it this way

(leftpad : (do (c : Character) (n : Natural) (s : String) (c n s -> (({c} * n) + s)))
(leftpad = ((c : Character) (n : Natural) (s : String) -> ((({c} * n) + s) : String)))



I really want to use equality for stuff, but it makes macros hard since you 
can't tell what exactly the equality expression is gonna do.
There's a special case where a single symbol is unbound on the lhs, rhs, or both
(x = 1) (1 = x) (x = y)
It does not support expressions like ((x + 1) = 2) because this requires an 
inverse.
If an unbound symbol appears on either side, it's the same as (let _ ...) 
for that symbol.



How are macros different than other functions?
They accept a program type which is only available before a program is run.
How do you do something like that?
You use (let x)
where x is a macro function.
stuff : [
	((e : {'a *}) -> (e _ 2))
	((e : {'b *}) -> (e _ 2))
]
(let stuff)
This is enough.
If you want a package, do 
(let ((import k) . stuff))
everything is a macrolet.
(k = (import "k"))
(let (k . syntax))
So the mechanism is that you (let f) where f is a function that's used to 
transform expressions.



how do I do refinements?
My notation right now is to associate a function with some type.
(T | (x -> (? (P x) True False)))
This is the same as 
(do (x : T) (? (P x) x))
(P (x : T)) 
these all produce type refinements.
So what would a vector constructor look like?
(vec : (d m -> ))

Instead of (x : y) where x is one of y, 
(x :: y) where x satisfies y.




So when I want to talk about the dependent result of a function, I do
((c : Character) (n : Natural) (s : String) -> (({c} * n) + s))



what's my rules for Rewrite, Resolve, and Reduce?


(do 
(let ({'a *} -> (& _ 1 _ 2)))
(a 1))

Rewrite, Resolve, and Reduce are three states of a Program Model.
At each stage, data is moved from the program model to the context.
The context is a store of bindings and information which is necessary to complete execution.

So how do I resolve macros?
They have to be bound before you do anything.
(do (let ({'a T} -> (& _ 1 _ 2))))
The context can be accessed by the ampersand.
The ampersand accepts function application in which it will apply the active function.
The ampersand can be subscripted to access parameters and data bound in a context.
The ampersand supports field lookup.

Function context needs 
	- the function object
	- the function parameters
	- the bindings



How do I talk about collections?
I can say a collection has 
	"cardinality of n"
	"includes x"
	"excludes x"
	"repeats x"
	"x at index y"
Additionally, I want to talk about vectors which are collections where each index has the same type.
A vector has 
	"cardinality of n"
	"repeats x"

How do I do symbol macros?
Talk about a symbol as a string.
A symbol is a string.
If I quote a symbol I get 
'symbol

(x .. n)
(x ..)
(.. n)
Sequence
(x ..)
(.. n)
(x .. n)

Collection > Sequence > (* ..) > (.. *) > (* .. *)

What's a vector, a collection where every index is the same type.
They are a form of collection, but with a strict distinction.
{* '..} 
{'.. Natural}
{* '.. Natural}
What is a collection of a length?
(* : Collection)



(x : T, abc)



What's a good example of syntax? McCarthy 91 Function.
What about Quicksort?

(quicksort = ((list : Vector) -> 
 ? ((# list) > 1) 
   (swap = (pv i j ->
    ??
      (((list _ i) < (list _ pv)) and (i < pv))
      (swap pv (i + 1) j)
      (((list _ j) > (list _ pv)) and (j > pv))
      (swap pv i (j - 1))
      (((list _ j) < (list _ pv)) and ((list _ i) < (list _ pv)))
      (tmp = (list _ i),
       list _ i (list _ j),
       list _ j tmp,
       swap pv i j),
      (quicksort ((@ (@ (list _ 1))) : (Collection | 
                 (c -> (? ((# c) = ((# list) - pv)) True))))),
      (quicksort ((@ (@ (list _ (pivot _ 1)))) : (Collection | 
                 (c -> (? ((# c) = ((# list) - pv)) True)))))))))
cool, this isn't many more lines than C/C++



How do I talk about collections?
A collection can 
- Contain a thing
- Have a length
- Be a vector
The deal is you can't actually create a collection with incomplete information.
Which means if you want to create a vector you do.
({A} * 100)
What if you want to talk about abstract length?
({*} * 100)
What if you want to talk about contains?
That one's tricky.
((* : Collection) + {x})
Any collection that contains x

Can you use types as blanks?
Yes.
If a hole accepts a member of a type, then providing the type quantifies that 
expression.
This is pathological as the result of quantified nested expression will force
quantification of the outer expression.
When does a quantified expression stop?
When the outer expression accepts anything.





Default functions...
Quote : ((Expression) -> Program)
Evaluate : ((Program) -> Data)
Create : ((fields : Collection) -> Collection)
Take : ((members : Collection) -> Type)
Abstract : ((parameters : ({Symbol} * Number)) Expression -> Function)
Let : ((x : Symbol) y -> y)
Let : (Function -> Nil)
Sum : (({Number} *) -> Number)
Sum : ((Collection ...) -> Collection)
Dif : (({Number} *) -> Number)
Dif : (({Collection} *) -> Collection)
Dif : ((Collection) Any -> Collection)
Mul : (({Number} * Number) -> )

? : (({Boolean Program} *) -> [Any Nil]) 
? : ((({Boolean Program} *) + {Program}) -> Any)


Can I do boolean case matching?
(? cond succ)
(? cond succ fail)
(? cond succ cond succ)
(? cond succ cond succ fail)



How do I express a collection that contains?
	(Collection | (c -> (? (C / T) C)))

I have effect handlers using the higher order function, (with ... _)
(with) takes a number of symbol function pairs.
(with 
f (x -> x) 
g (x -> x) 
(f g 1)
)
with will either return the result of the last expression, or the result of
one of the handlers.
The handler will either resume back to the last expression, or return a value
out of the with.
The first parameter is the resumption.

(with ... _)
binds effect handlers to symbols which may be used within the last expression.

lexical shit is not portable.
The more I tie stuff to a lexical domain, the more I can't reuse any of it.
the (with ... _) form does not allow for re-useable effects right now.
I can change this by letting (with x) propagate the binding.
so if I supply (with (x)), then it simply passes the function through as `x`.

Higher order bindings are provided at the image level. 
You can't make a binding

Comparisons are part of conditional expressions.
There aren't comparisons outside of conditional expressions since their use is so rare.

there is no let. I don't need let if I have binding.

(Success = [* True])
(Failure = [_ False])
(Judgement = [Success Failure])
(({'? Judgement} + ({Expression} *)) -> *)
({Symbol '= *} -> (& _ 1 _ 3))
({* '= *} -> Judgement)

How do you define an implicit dependency?
You don't. There is no implicit dependency. Rather, you write a function that 
imports everything properly.

what do I call "with" because it's not true algebraic effects. 
A function that calls an effect may also be calling a normal function.
It's called an inflection because control can take a non-linear path.



You should only ever be five lines away from http, gui, and gpu.

What's my operation for primitive stuff?
Emit some code and provide a reference to it.
There is no operation. You have a data sequence.
How do you do that though? What's the primitive data type?
The Byte?
Sure.


(hypot = (a b -> (2 ^/ (a ^ 2 + b ^ 2))))

One of the really handy things about effect handlers is that you can provide
your own handlers. The problem is that I can't ever define a function which 
expexts handlers external to its own definition. 
This is a problem with how inflection works with closures.
What happens when I close over an inflection? 
Does the closure capture the entire handler, or just the control point?
What I want is for a function to call up out of its context arbitrarily.

(with (x) )



(M : Collection)
What function makes a collection?
(Collect )

(T : Type)

(M // n) finds the index of the member, n, in M.


This doesn't work because selecting by type can select multiple.
You reduce it to a set.

(M = {(x = 1) 2 3 (a = 4)})

I have to decide how a collection keeps its context.
in C, the names are erased so unless something has access to the definition of 
the object, it doesn't know what the object is.
in my language, you can always cast-by-dereference to some object.
the definition has to be passed around then.
or do I split into arrays and records? naw. unecessary.

(M = {(1 + (n = 2))})
is 'n a field in this context?
no, because n is not the identifier for a field.

do I do unification?

((x + y) = (2 + 2))

no, unecessary, not readable.
I want assignment, not clever games and logic puzzles.
No unification, just comparison or variable binding.


what can I do with images?
I can open them.
I can copy a binding from one to another.
I can combine the bindings of two images into one image.
I can close an image.
I can load an oject.
I can store an object.


What's my collection operations?

({} + {})
({} - {})
({} * {})
({} * Number)
({} *)
({} / *)
({} // *)
({} . Symbol)
({} _ Number)

none of these are helpful though.
I never, ever, want to take two sets and combine them.
Yes I do, that's arrays.

How do I say, "a collection with only one thing"?
{*}
How do I say, "a collection that's this long"?
({*} * n)
How do I say, "an array"?
({*} *)

So adding effects to a function is one thing, 
(x -> with t
      t x)
but what happens when a function closes over an effect?
What about effectful expressions?
What it really means is that effects are just control flow mechanisms.
so how do I separate the control flow from the function, since they're different?
I want delimited continuations.

What I want is a function which has an interface that you provide stuff to 
lexically where it is called rather than using what it closed over at definition.
This is the lexical symbolic with that I use where you override closure bindings.


What about weirdness though like 

(k : Function,
 f = (x -> k x),
 g = (x -> f x),
 h = (x -> g x),
 with k (r x -> r x) (h 1))
how do I know that the h is overridden.
I still need to add an interface to functions.
That would probably be taking the handler as a type.
Wouldn't the function just close over the handler objects though?
Yes.

(with g (r -> r 1) 
      (x -> (r)))

this breaks encapsulation because I can see which functions the compiled function calls.

(f = (with e (r x -> x + 1))
      (x -> e x))
the modulated evaluation expression here ends by binding its result to f, but 
if I call f later, where does the result end up?
(f 1)
it ends up bound to f which is not the intended effect.
So what I actually need to do is preserve the requirement of a with for a function
that closed over one.

so i have 

what if I made my syntax pretty?

Do notation
(a, b, c)
(do a b c)

With
(with f as (->) in )

(let x be 1 and y be 9 in x + y)

(let x be 1 and y be 9 in
 do )

(if A then X
    B then Y
    C then X
    else J)

(if A then X or B then Y or C then X else J)
(if A then X or B then Y or C then X else J)


(x = 1,
if x = 2 then y = 1
or x = 3 then y = 2
or x = 1 then y = 3
else y = 7)

(x = 1,
? (x = 2) (y = 1)
  (x = 3) (y = 2)
  (x = 1) (y = 3))

(if (x = 2) then (y = 1)
 or (x = 3) then (y = 2)
 or (x = 1) then (y = 3)
 else   (y = 7))

What makes 
(x = 1) 
different than 
(let x be 1 in x)


what's my syntax???


Inversion:	(with x as f and y as g in (x , y))
Let:		(let x be a and y be c in z)
Sequence:	(do x y z)
Definition:	(define x f)
Collection:	(create x y z)
Type:		(of x y z)
Assertion:	(x : y), (a b as y)
Constraint:	(x where y), (x y where m)


How do I talk about relating two things in scope?



(compose f g h x)
(h (g (f x)))
so you start from second to last, apply the first to the following


loop macro

introduce variables and arrange resources first
'using	-	introduce variables

declare ranges with clauses
'for	-	a stepped range
'while	-	a continuous range over success
'until	-	a continuous range over failure
'over	-	a range derived from structure
multiple ranges can be used and the loop will repeat only if every clause is active

declare iterative effects
'leave	-	a result visible to following iterations
'collect-	each index is an independent loop result


...this is too complex and as a result is inextensible.
What's the simplest loop facility?
I need variable introduction, initial assignment, incremental step, and step condition.
or... OR... I don't provide a loop mechanism at all.
Just don't do it because it's always wrong for every use case.
standard library should provide looping functions for stuff.
how do you normally loop though?

(List = [{* List} {*}])


What do I mean when I say that 
(T t | (a b -> P a b))?


How do I return an in-place collection from a transform such that it's not 
treated as a program?

(compute {1 '+ 1} in This) ==> 2
(compute (collect 1 '+ 1) in This) ==> 2
(compute {collect 1 '+ 1} in This) ==> {1 '+ 1}
(compute ' ''{1 '+ 1} in This) ==> {1 '+ 1}

how do I compute a list without computing it?
Easy, say that it's not a program.
Just return the list.


semantics:

(a ;) is an array of a

({1} + (a ;)) is {1 a a a a ...}
({1} + {(a ;)}) is {1 {a a a a a a a}}
but what about 
({1} + ({a b} ;)) is {1 a b a b a b ...}
({1} + ({{a b}} ;)) is {1 {a b} {a b} ...}


A binding expression can be out of order. 
In a scope, if the binding expression.


What is my type system?

A type represents one or more possible instantiations as members.
A unit is a type corresponding to exactly one instantiation.
A discrete type is a type where you can count its members.
A continuous type is a type where you can't count its members.
The top type '* represents all types in the context.
The bottom type '_ represents no types in the context.


so if (T : Type, t : Type, (T = t) : Judgement) then is (T < t and t < T) true?



What's the nth equivalent of the haskell datatype
data Tree x = Leaf x | Branch Tree x Tree x

(Tree = [{*} {Tree Tree}])
(Tree = [Leaf Branch], Leaf = [{*}], Branch = [{Tree Tree}])


I have a single place operator, '@
It references or dereferences based on type.
If I give it Any, (x = (@ (y : Any))), it references, ((? x) = Place)
If I give it a Place, (z = (@ x)), it dereferences, (z = y)
If I want to reference a place, I "downcast", (x' = (@ (x : Unit)))

here's a question: 
does (t : T) mean (T = (m + t)), or does it mean (T = (m + [t]))
Like if I say something is a Judgement, does it mean [Any Nil True False] or 
does it mean [Success Failure]
It means [Any Nil True False]
What does it mean if I constrain a type?
(A = [a], B = [b], C = [c], T = [A B C], k : T)

How do you filter.
Filters are guaranteed to run for each, except it duplicates the array.
You can do a map and get a filter from a map.
what about fold?
that's just updating a value in the scope for map.
it's all just map.
how do I write map?
(M * f)

Given (M : Collection) and 
(f = (x -> x + 1),
 g = (x y -> x + y),
 r = (from a to b))
then 
(M f) maps f over M because f has one parameter
(M g) folds M over g because g has two parameters
(M r) makes a slice of M from index a to index b

How do I do multiple types?
I have (k = (t T | (m n -> P m n)))
Where x and y are types.
Here, instances are tuples of things that all have to exist at the same time.
Given two things, (x y : k), you can say they are instances of (k) such that
(x : t) and (y : T).
However, this may happen out of order and across scopes.
Well the easiest is that you only declare this type when all instances are present
What does this even do though?
I have a type compared to some other type.
(t T | (x y -> if ((P x) /\ (Q y)) then true))

What I really mean is 
(Construct x = {x},
 Wrapped = (Collection | image Construct))


Constructors are good to have.
The system is closed though.
What about GADT's?
It's all a trick of functions.
That's a macro.
What is a datatype?
It's data, used as a type constraint.
Just (a ~ b)



How do I set reader macros?
I don't.
I don't want to run a program entirely from the command line.
The read and print functions are just there to facilitate the compiler/debugger.
The point is when your done, you can run your program without that.
The workflow is you have your command line interface/REPL that lets you touch and tickle the executable binary.
At some point, you decide the program is finished, so you either export the function to create an executable
or you export the image to create a library.
The point is that everything you do is with the intent to extract a stand-alone program.
If you want a reader "mode" that reads in some syntax and turns it into lisp, you want an executable that does that.
You don't want a read-table.


what are my primitive functions?

5 qualified type        (take x where f)
6 enumerated type       (some ...)
4 collection            (collect s1 as x s2 as y)
7 function              (function (x y z) ...)
8 let notation          (let x be a and y be b and z be c and ... in ...)
10  Inversion             (with x as f and y as g and z as h and ... in ...)
9 do notation           (do a , b , c , ...)
11  boolean conditional   (if b then x else y)
12  qualified conditional (given x as y where a then p where b then q where c then r where ...)
13  range                 (from a to b)
14  top-level             (define x as a and y as b and ...)
1 quote                 (' n)
2 unquote               ('' n)
3 requote               (''' n)
20,21,22,23  arithmetic            + - * / 
24  expt                  (^ a b)
25  root                  (/^ a b) 
26  remainder             (// a b)
27  modulo                (mod a b)
28  floor                 (floor a)
29  ceiling               (ceil a)
30  absolute value        (|| a) 
31  numerator             (*/ a)
32  denominator           (/. a)
40,41,42 boolean arithmetic    and or not
50  cardinality           (# x)
51  size                  (## x)
52  typeof                (? x)
53  assertion             (the x y)
61  subscript             (at c n [v])
62  field access          (in c f [v])

map fold slice with transforms


1. List of transforms for rewriting
2. List of bindings.
After rewriting completes, there should be a primitive expression with variables pointing to either globals or locals.
The compiler just takes the primitive expressions and writes out some assembly.

Questions:
How to determine which image I'm compiling in?
How to run a program to run a program?
Transforms are just a program that returns true for an expression.


I need primitive function ops that correspond to the primitive functions in the language.

Function    f
Collection  c
Type        T
refinement  t
Add         +
Sub         -
Mul         *
Div         /
Mod         %
rem         \
numerator   n
denominator d
expt        ^
root        r
do          D
let         l
Inversion   i
and         &
or          |
not         ~
quote       '
conditional ?
match case  !
pointer     @
equality    =
less        <
greater     >
assignment  :
vector      ;


what does fib in my language look like?
(define fib as (n -> 
where n is 0 then 1
        is 1 then 1
        is Number then ((fib (n - 1)) + (fib (n - 2)))))

string concatenation example

in C
char *concat (char *x, int Size_x, char *y, int Size_y) 
{
  char z = malloc(sizeof(char) * (Size_x + Size_y));
  for (int n = 0; n < Size_x; n++)
  {
    z[n] = x[n];
  }
  for (int n = 0; n < Size_y; n++)
  {
    z[n + Size_x] = y[n];
  }
  return z;
}

char *msg = concat("Hello, ", 7 ,"World!", 6);

in nth
(concat = (first second ->
(let z be (array Character ((# first) + (# second)))
 and copyfirst be 
     (n m -> 
            if (n < (# first))
            then (copyfirst (n + 1) (m _ n (first _ n)))
            else m)
 and copysecond be 
     (n m ->
            if (n < (# second))
            then (copysecond (n + 1) (m _ (n + (# x)) (second _ n))
            else m))
 in 
   (copysecond 1 (copyfirst 1 z)))))

((msg : (Array Character)) = (concat "Hello, " "World!"))


concat that uses delimited continuations

(concat = ((first : String) (second : String) ->
(let z be (String ((# first) + (# second)))
 and copyloop be ((src : String) (dest : String) n ->
  if (n < (# src)) 
  then (copyloop src (dest _ n = (src _ n)) (n + 1))
  else dest)
 in 
 with string-segment as 
        ((continue : Function) (str : String) ->
          (continue ((@ (@ str)) : (String (# first)))) ,
          (continue ((@ (@ (str _ (# first)))) : (String (# second)))))
     in (copyloop)

 )))))



void SaveFile(char* pathname, void *data, int length)
{
  file = fopen(pathname);
  write(file, data, length);
}

(SaveFile = ((pathname : String) (data : Place) (format : Type) ->
  (with fopen as ((contd : Function) (filepath : String) ->
  (file = ((System . Open) ((System . HomeDir) + filepath))),
  (contd file),
  ((System . Close) file))
  in 
  ((System . Write) (fopen pathname) ((@ data) : format))
)))

Keep equality assignment.
Keep definition.
You need all three.

Create a binding in a new delimited scope.
Create a binding in the current lexical scope.
Create a binding in the current top level.

Is equality assignment limited to the sequence scope or is it limited to the 
current lexical scope?
Lets say
(f = (x -> 
((a = (f x)),
 (b = (g a)),
 (c = (h b))),
()
)

what about 
(let m be k in (n = (f m)))
where does n create its binding?
It creates it in the current lexical scope.
What about corecursion like 
((f = (x -> g x)),
 (g = (x -> f x)))
This technically doesn't work.
What if it should work?
What if you're in a lexical context and you do that?
You assign stuff.
Do you search the lexical context for bindings?
My syntax should be 
(let 
x = 1
y = 2
z = 3
in
x + y + z)

(let x = 1 y = 2 z = 3 in x + y + z)

so my let syntax uses equality assignment?
yes.
The advantage of let is that you also have a clear distinction between before the binding and after.
let also allows you to easily reason about recursive binding since all the symbols are up front.


What forms of let do I have?
(let x = 1 in ...)
(let x : t in ...)
(let (x y) = '(a b) in ...)
what does (let x : t) do?
It creates a type constraint.
what about 
(let x : t = n)
that's the same as 
(let (x : t) = n in ...)
what happens if I do
(let m = (collection (f x) (g x) (h x))
     x = (k m) 
 in ...)
now I have an unsolvable recursive thing.
So recursion is only useful in functions.
So I want 
(let 
    f = (x -> g x)
    g = (x -> f x) in ...)
where f and g are recursive functions.
This will absolutely loop infinitely.
How is this recursion different than 
(let 
    f = ((collection 1 2) + g)
    g = ((collection 3 4) + f
 in ...)
What I'm saying is 
(f : Function , g : Function , 
 f = (x -> g x) , g = (x -> f x))
I solve recursion by early constraint, late binding.
I really just want 
(f = (x -> g x), g = (x -> f x))
(f x = (g x) , g x = (f x))



so sequences are different than let binding.
is equality binding part of a sequence?
no.
so I have no let binding.
what about destructuring binding?

I have (m = (collection 1 2 3 4 5))
and I want to do 
(let (a b c d e) = m in a + b + c + d + e)
A function is 
(x -> x)

I add a constraint by doing (x : t).
I make recursion by declaring constraints first.
(f : ((A) -> B), 
 g : ((K) -> L), 
 f = (x -> g x),
 g = (x -> f x))
This lets me do inline binding and stuff.
Temporary results.

(x = (1 + (y = (5 + 3))))
now I have x and y.

f = (x -> y = (x + 1), z = (y + 2))

do I still have let?
maybe I have something else like 
(a b c d e f) == (collection 1 2 3 4 5)
or what about a slice?
((from 2 to 4) (collection 1 2 3 4 5))
I mean if I have 
(a = ((from 1 to 100) ; 10000))
then a slice of a would be 
((a' : ((? (a _ 1)) ; 877)) = (@ (@ a _ 39)))


what is my deconstructing bind syntax?
I can have symbols and nil correspond to fields in a collection
(a b (_ c)) = (collection 1 2 (collection 3 4))
a = 1, b = 2, c = 4

If I want to copy an array, I have to do something like 
(a *) 
which binds a to every index in the collection.

I can delimit a by adding a constraint.
((a : (array * 5)) *) where a can only contain 5 indicies from the collection.


What if I had a collection, M, and I wanted to take the first and last thing?
(a (_ : ((# M) - 2)) b) = M
that gives me the first and last things.
How am I allowed to constrain nil? 
because it's not being treated as nil in this context, it's a placeholder symbol that says not to create an actual binding.
How to destructure a let expression?

(let (_ m * (_ : 'in) n *) = (& _ 1))


conditional syntax....

if b then x
if b then x else y
? b x
? b x y



? b x
? b x y
? m a x b y c z


assignment needs to create a binding, but must also be identical to simply giving the identifier.


what to do with a nullary inversion?

((h = (r x -> (r x) + 1) >> (h 1))

this is the identity.
(let h = (r x -> r x) 
 in
   h >> h 1)



I want to define enums/sum types where I have 
(define a (type nil))
(define b (type nil))
(define c (type nil))
which works, but I want a shorthand such that
(define K (type a b c)) will create the former as well as the relations
(a : K)
(b : K)
(c : K)

I also have 
(m ~ a) which is a datatype.

I want to be able to define a bunch of stuff.

(define K 
        | a 
        | b 
        | c 
        | m K)
that last one is 
(m : ((x : K) -> 'm-K ~ x))
so that is 

this (define K | a | m K | n K K -> m b)
is the same as
(let K : Type in
 (define a (type))
 (define m (K -> K ~ (collection (& _ 1))))
 (define n (K K -> ))


what are my operations on collections?

(let x = (collection 1 2 3)
     y = (collection (a = 4) (b = 5) (c = 6))
 in
    x + y,
    x - y,
    # x,
    x _ 1,
    y . a,
    )


can I seriously overload all the pointer operations into one operator?

(x = (byte 2),
 y : Byte,
 z = (@ x),
 y = (@ z))

what are datatypes?
they are a way to "index" data arbitrarily.
What's the difference between 

(k : (A ~ B))
and 
(k : (B | *))
so nothing.
there's nothing different about these.
the latter example is still an arbitrary refinement of B, but you don't need to tag it with data.
You just say 
(B : k) and now you have an instance of k.
stupid.
get rid of datatypes.
if you want to tag things and have both persist during runtime, use a collection.
yeah if I'm talking about refinement types, then tagging the type is the job of a qualified type.

how to do named fields in a collection?

(collection <a 1> <b 2> <c 3>)
(collection a = 1 b = 2 c = 3)
(collection (a 1)(b 2)(c 3))
(collection (a)(b)(c)(d))
(collection a = 1 b = 2 c = 3)
(collection a . 1 b . 2 c . 3)
(collection a . 1
            b . 2
            c . 3))

I divide two numbers I get the quotient and the remainder.
then I can use rem to get the remainder out of the structure.

what types are subtypes. is it a transitive relationship?
a < b < c therefore a < c