You should only ever be five lines away from networks, peripherals, and concurrency.

In Haskell...
  class TypeOf a where
    typeOf :: a -> String
  instance TypeOf Bool where
    typeOf _ = "Bool"
  instance TypeOf Char where
    typeOf _ = "Char"
  instance (TypeOf a, TypeOf b) => TypeOf (a, b) where
    typeOf(a, b) = "(" ++ typeOf a ++ "' " ++ typeOf b ++ ")"
|> typeOf (True, 'a')
   "(Bool, Char)"

In nth...
  (define TypeOf (-> String))
  (define (typeOf : TypeOf) 
    (type
      ((Boolean) -> "Boolean")
      ((Character) -> "Character")
      (a b -> "\(typeOf a), \(typeOf b)")))
|> (typeOf True "a")
   "(Boolean, Character)"

I only support Integers.
Integers are shared by everything.
You can accomplish most stuff with just integers.
If you want more, just add additional stuff on top of integers.
Plus I have ranges which are static sized integers.



(quicksort = ((list : Array) -> 
 ? ((# list) > 1) 
   (swap = (pv i j ->
    ??
      (((list _ i) < (list _ pv)) and (i < pv))
      (swap pv (i + 1) j)
      (((list _ j) > (list _ pv)) and (j > pv))
      (swap pv i (j - 1))
      (((list _ j) < (list _ pv)) and ((list _ i) < (list _ pv)))
      (tmp = (list _ i),
       list _ i (list _ j),
       list _ j tmp,
       swap pv i j),
      (quicksort ((@ (@ (list _ 1))) : (Collection | 
                 (c -> (? ((# c) = ((# list) - pv)) True))))),
      (quicksort ((@ (@ (list _ (pivot _ 1)))) : (Collection | 
                 (c -> (? ((# c) = ((# list) - pv)) True)))))))))