What operations and forms are NOT quantified?
Q represents a quantified sub-program,
(x : T), (x)
What operations are quantified over the sub-program.
{(x : T), (x)}
does this result in a quantification of collections?
What if I want to specify the quantification of a collection?
The type of a collection of a bunch of things
what about a sequence?
A, B, Q
Q, A, B
((x : T), (x)), A, B
quantify over side effects?
yes.
Q, A, B
(f (g (h ((x : T), x))))
so in this case the quantification is propagated
How would I make a sequence by quantified?
(x : T), ((A, B, x), C)



how to create operations that do not affect context?
Macros don't affect context by default.
or do i need that if i have closures?
because closures capture everything.
Also i dont want to capture too small of a tree.
how would i implement green threads?
well you'd have to call a function that captures the continuation.
So there's a list of threads, a scheduler, and a function to capture a point and switch to another thread.
What does that look like?
You can turn all of them into a yield function over a list of continuations.
(threads <- {}),
(yield <- (c -> ))


I'd like to make an in-place insert operation.
(({1 3} \\ 1 2) = {1 2 3})


What if there's an expression which accepts anything?
Does that allow quantification?
(<- ((n : {'m *}) -> (f (n \ 2))),
(m (1 + Nat))
What about quantification as iteration?
Loop incrementing an array

how to loop?
Do I do tail call optimization? yes
can I also just do continuations? yes

(countdown <- (i -> (? (i > 0) (& <- (countdown (i - 1)) i))))
(countdown <- (i -> (? (i > 0) (countdown (i - 1)) i)))
(countdown <- (i -> (& \ 0 '(? (i > 0) (& <- (i <- (i - 1))) i))))
named let is such a convenient form. 
what's the equivalent of named let?
(& <- (loop <- `(a, (& <- loop))))
is there no equivalent of named let?
No but you can make it pretty easily.
((e : {'loop Symbol Expression}) -> ((e \ 1) <- (e \ 2)), (! (e \ 1)))



lets say I want to take the context so that I can always get a value back.
Contexts are bound by functions.
New functions create new contexts.
So when I use '&, it's referring to the immediate function context.
But it's not actually, it's referring the rest of the program.
So then how would I do threads?
use a FIFO proc list.

threads <- {}

sticking point, if the function boundary is the prompt, then what happens when 
you take the context at different points?
(f <- (x -> &, (g x), &, (h x))
it all equals the lambda with fixed arguments.
How to loop
(countdown <- (n -> 
	(? (n > 0) 
	   (n ~ (n - 1)), (& <- &)
	   n)))
or does it set control to a specific point?
what about returning, can you exit to a different place?
In a sequence, the context is the position at the sequence so 
(a, (x <- &), b, c, (y <- &), d)
((x \ 0) = (b, c, d))
((y \ 0) = (d))



Say I define some function on a collection and i call it 
(f <- ((n : Collection) -> n + {0})),
(f (1 2))
how does it know to treat '(1 2) as an expression not a collection?
type tags.
(1 2) is not the same as {1 2} because there's a type tag.



how to do pointers with one symbol?
there's two operations: derive the location of some data and refer to a location
@ is pointer operations.
trivial ((@ (@ x)) = x)
that looks nice
what about taking the address of a location?
(x <- (@ y)),
((@ x) = y)
if it's possible to take the address of an address then i can do it.
I have to do some type-level wrenching to do it.
((: y) = Location), (@ (y : *))
you can't upcast.
how to get the address of an address?
there's two types of the expression, 
[({'@ *} -> Location) ({'@ Location} -> *)]
what I need is ({'@ Location} -> Location)
so what kind of type-level wrenching can do this?
if I expect a location, then thats the operation that's applied
so now I have 
(({'@ *} -> Location) : Location)
(({'@ Location} -> *) : *)
(({'@ Location} -> Location) : Location)



where to use period?
its used as a decimal point in a symbol.
1.1
what notation should it be used for?
composition?
(f : Function), (g : Function), ((f . g) : Function)
use it to terminate a bunch of closing braces.
No that's harder to read.
Actually should I use it to look up names?
dot can be used as subscript or name lookup
it's overloaded based on whether you're handing it a number or a symbol.
(m <- {(x <- 1) (y <- 2) (z <- 3)}),
((m . 1) = 1),
((m . 'x) = 1)
no this sucks


Whats my syntax?
(math <- ({Number} + ['+ '- '* '/ '//] + [{Number} math]))
(logic <- ([{Boolean} {'- Boolean}] + ['/\ '\/] + [{Boolean} {'- Boolean} logic])
(collection-algebra <- ({Collection} + ['+ '- '/] + [{Collection} collection-algebra]))
(type-algebra <- ({Type} + ['+ '- '/] + [{Type} type-algebra]))
{Collection '. Number}
{Collection '. Symbol}
{Collection '/ *}
{Collection *}
({Symbol} * Collection + {'->} + Expression)
(Function + Collection)
{'@ *}
{'@ Location}
{Number ['< '>] Number}
{Type ['< '>] Type}
{* '= *}
{'? Boolean Expression Expression}
{'? Boolean Expression}