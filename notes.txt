What operations and forms are NOT quantified?
Q represents a quantified sub-program,
(x : T), (x)
What operations are quantified over the sub-program.
{(x : T), (x)}
does this result in a quantification of collections?
What if I want to specify the quantification of a collection?
The type of a collection of a bunch of things
what about a sequence?
A, B, Q
Q, A, B
((x : T), (x)), A, B
quantify over side effects?
yes.
Q, A, B
(f (g (h ((x : T), x))))
so in this case the quantification is propagated
How would I make a sequence by quantified?
(x : T), ((A, B, x), C)



how to create operations that do not affect context?
Macros don't affect context by default.
or do i need that if i have closures?
because closures capture everything.
Also i dont want to capture too small of a tree.
how would i implement green threads?
well you'd have to call a function that captures the continuation.
So there's a list of threads, a scheduler, and a function to capture a point and switch to another thread.
What does that look like?
You can turn all of them into a yield function over a list of continuations.
(threads <- {}),
(yield <- (_ -> ))


I'd like to make an in-place insert operation.
(({1 3} \\ 1 2) = {1 2 3})


What if there's an expression which accepts anything?
Does that allow quantification?
(<- ((n : {'m *}) -> (f (n \ 2))),
(m (1 + Nat))
What about quantification as iteration?
Loop incrementing an array

how to loop?
Do I do tail call optimization? yes
can I also just do continuations? yes

(countdown <- (i -> (? (i > 0) (& <- (countdown (i - 1)) i))))
(countdown <- (i -> (? (i > 0) (countdown (i - 1)) i)))
(countdown <- (i -> (& \ 0 '(? (i > 0) (& <- (i <- (i - 1))) i))))
named let is such a convenient form. 
what's the equivalent of named let?
(& <- (loop <- `(a, (& <- loop))))
is there no equivalent of named let?
No but you can make it pretty easily.
((e : {'loop Symbol Expression}) -> ((e \ 1) <- (e \ 2)), (! (e \ 1)))



lets say I want to take the context so that I can always get a value back.
Contexts are bound by functions.
New functions create new contexts.
So when I use '&, it's referring to the immediate function context.
But it's not actually, it's referring the rest of the program.
So then how would I do threads?
use a FIFO proc list.

threads <- {}



The expression problem:
You're making a game.
You have players with health and healing.
You set it up so

Health : Natural
Player : [(m : Collection), (? (m / Health) m)]
Damage : ((p : Player) -> (p / Health (lower (p / Health))))
Heal : ((p : Player) -> (p / Health (raise (p / Health))))
Crate : Player
Damage : ((p : Crate) -> (p / Health (lower (p / Health))))