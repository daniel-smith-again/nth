"Addition", 		({Number '+ Number} -> Number)
"Union",		({Collection '+ Collection} -> Collection)
"Subtraction",		({Number '+ Number} -> Number)
"Complement", 		({Collection '- Collection} -> Collection)
"Multiplication",	({Number '* Number} -> Number)
"Product",		({Collection} '* Number} -> Number)
"Quotient",		({Number '/ Number} -> Number)
"Membership",		({Collection '/ *} -> [* _])
"Remainder",		({Number '// Number} -> Number)
"Conjunction",		({Boolean '/\ Boolean} -> Boolean)
"Disjunction",		({Boolean '\/ Boolean} -> Boolean)
"Negation",		({'- Boolean} -> Boolean)
"Assignment",		({Symbol '<- *} -> *)
"Function",		(Symbol '-> *)
"Image",		(Expression '-> *)



Function Constructor:
(Collection :: (m -> (m / {'->})))

Function Application:
(Collection :: (m -> ((: (m _ 1)) = Function))

Collection Constructor:
(Create : Function)

Collection Subscript:
{Collection '_ Natural}

Collection Field:
{Collection '. Symbol}

Collection Cardinality:
(# : Function)

Collection Union:
{Collection '+ Collection}

Collection Difference:
{Collection '- Collection}

Collection Sequence:
{Collection '* *}

Collection Membership:
{Collection '/ *}

Type Constructor:
(Take : Function)

Type Assertion:
{* ': Type}

Type Constraint:
{* ':: Function}

Type Union:
{Type '+ Type}

Type Difference:
{Type '- Type}

Type Membership:
{Type '/ *}

Addition:
{Number '+ Number}

Subtraction:
{Number '- Number}

Multiplication:
{Number '* Number}

Quotient:
{Number '/ Number}

Remainder:
{Number '// Number}

Equality:
{* '= *}
{Symbol '= *}
{* '= Symbol}
{Symbol '= Symbol}

Inequality:
{* '/= *}

Less:
{* '< *}

Less or Equal:
{* '<= *}

Greater:
{* '> *}

Greater or Equal:
{* '>= *}

Conjunction: 
{Boolean '/\ Boolean}

Disjunction:
{Boolean '\/ Boolean}

Negation: 
{'- Boolean}

Let Binding:
(let : Function)

Sequential Evaluation:
(do : Function)

Conditional Evaluation:
(? : Function)