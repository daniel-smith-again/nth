"Addition", 		({Number '+ Number} -> Number)
"Union",		({Collection '+ Collection} -> Collection)
"Subtraction",		({Number '+ Number} -> Number)
"Complement", 		({Collection '- Collection} -> Collection)
"Multiplication",	({Number '* Number} -> Number)
"Product",		({Collection} '* Number} -> Number)
"Quotient",		({Number '/ Number} -> Number)
"Membership",		({Collection '/ *} -> [* _])
"Remainder",		({Number '// Number} -> Number)
"Conjunction",		({Boolean '/\ Boolean} -> Boolean)
"Disjunction",		({Boolean '\/ Boolean} -> Boolean)
"Negation",		({'- Boolean} -> Boolean)
"Assignment",		({Symbol '<- *} -> *)
"Function",		(Symbol '-> *)
"Image",		(Expression '-> *)



Function Constructor:

Function Application:

Collection Constructor:

Collection Subscript:

Collection Field:

Collection Cardinality:

Collection Union:

Collection Difference:

Collection Sequence:

Collection Membership:

Type Constructor:

Type Assertion:

Type Constraint:

Type Union:

Type Difference:

Type Membership:

Addition:

Subtraction:

Multiplication:

Quotient:

Remainder:

Equality:

Inequality:

Less:

Less or Equal:

Greater:

Greater or Equal:

Let Binding:

Sequential Evaluation:

Conditional Evaluation: